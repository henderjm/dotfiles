#!/bin/bash
set -eu

HOMEBREW_FILES=("/usr/local" "/Library/Caches/Homebrew")
DIR="$(cd "$( dirname "$0" )" && pwd )"

echo "$DIR"

# if [ ! -z "$DEBUG" ]; then
#   set -x
# fi

main() {
  #link_dot_files
  copy_scripts
  ensure_brew_exists
  update_brew_things
  setup_bash_it
  setup_ruby
  setup_python
  update_luanvim
  update_tmux_plugins
  ensure_git_config_set
  setup_gcloud
  update_go_tools
  setup_yq
}

bump_homebrew_group_permissions() {
  sudo chgrp -R admin "${HOMEBREW_FILES[@]}"
  sudo chmod -R g+w "${HOMEBREW_FILES[@]}"
}

create_backup_with_previous_permissions() {
  local homebrew_permissions_before_update
  homebrew_permissions_before_update="$(gmktemp -t homebrew_permissions_before_update.XXXXXX.txt)"
  ls -lhR "${HOMEBREW_FILES[@]}" > "$homebrew_permissions_before_update"
  echo "A backup file with previous permissions has been created at $homebrew_permissions_before_update"
}

print_usage() {
  echo "Usage: "
}

link_dot_files() {
  echo "Linking dot files from setup repo..."

  ln -Fsv "${DIR}"/.ctags "$HOME/.ctags"
  ln -Fsv "${DIR}"/.mrconfig "$HOME/.mrconfig"
  ln -Fsv "${DIR}"/.bashrc "$HOME/.bashrc"
  ln -Fsv "${DIR}"/.bash_profile "$HOME/.bash_profile"
  ln -Fsv "${DIR}"/Brewfile "$HOME/Brewfile"

}

copy_scripts() {
  cp "${DIR}/diff-so-fancy" /usr/local/bin
}

ensure_brew_exists() {
  echo "Ensuring brew exists..."
  if [[ ! -x /usr/local/bin/brew ]] ; then
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi
}

update_brew_things() {
  echo "Updating brew things..."
  brew tap Homebrew/bundle
  brew update
  brew upgrade
  (cd && brew bundle -v)
}

setup_ruby() {
    echo "Setting up ruby..."

    if ! rbenv versions | grep -q 2.4.1; then
      rbenv install 2.4.1
    fi
    rbenv global 2.4.1
}

setup_bash_it() {
    echo "Setting up bash-it..."
    if [ ! -d "${HOME}/.bash_it" ]; then
      git clone https://github.com/Bash-it/bash-it.git "${HOME}/.bash_it"
    fi

    "${HOME}/.bash_it/install.sh" --silent
    # mv ~/.bash_profile.bak ~/.bash_profile
    # ln -F -s ~/bin/git_prompt_info ~/.bash_it/custom/git_prompt_info.bash

    set +eu
    # shellcheck disable=1090
    source "${HOME}/.bash_it/bash_it.sh"

    # Enable bash-it aliases
    aliases=(git general tmux homebrew)
    for a in "${aliases[@]}"; do
      bash-it enable alias "$a"
    done

    # Enable bash-it completions
    completions=(brew docker docker-machine git)
    for c in "${completions[@]}"; do
      bash-it enable completion "$c"
    done
    set -eu
}

update_luanvim() {
  echo "Ensuring that we have neovim python plugins"
  unset PYTHONPATH
  pip3 install --upgrade neovim
  pip3 install --upgrade neovim
  gem install neovim
  echo "Updating luanvim..."
  if [[ ! -d "${HOME}/.vim" ]] ; then
    git clone https://github.com/luan/vimfiles.git ~/.vim
  fi
  (
    cd "${HOME}/.vim"
    git checkout master
    git pull -r
    ./update
  )
}

update_tmux_plugins() {
  echo "Updating tmux plugins..."
  if [[ ! -d "${HOME}/.tmux/plugins/tpm" ]] ; then
    mkdir -p "${HOME}/.tmux/plugins"
    git clone https://github.com/tmux-plugins/tpm "${HOME}/.tmux/plugins/tpm"
  else
    (cd "${HOME}/.tmux/plugins/tpm" ; git pull )
    "$HOME"/.tmux/plugins/tpm/bin/update_plugins all
  fi
}

ensure_git_config_set() {
  echo "Ensuring git configs are set up..."
  cp "${DIR}/.gitconfig" "$HOME/.gitconfig" 2>/dev/null
  cp "${DIR}/.custom_gitconfig" "$HOME/.custom_gitconfig" 2>/dev/null

  git config --global color.ui true

  git config --global color.diff-highlight.oldNormal "red bold"
  git config --global color.diff-highlight.oldHighlight "red bold 52"
  git config --global color.diff-highlight.newNormal "green bold"
  git config --global color.diff-highlight.newHighlight "green bold 22"

  git config --global color.diff.meta "227"
  git config --global color.diff.frag "magenta bold"
  git config --global color.diff.commit "227 bold"
  git config --global color.diff.old "red bold"
  git config --global color.diff.new "green bold"
  git config --global color.diff.whitespace "red reverse"
}

setup_gcloud() {
    if [[ ! -d "${HOME}/google-cloud-sdk" ]] ; then
        curl https://sdk.cloud.google.com | bash
    fi
    #TODO: Add else case that performs check/upgrade
}

update_go_tools() {
    echo "Installing go tools..."
    for tool in \
      "github.com/rogpeppe/godef" \
        "github.com/alecthomas/gometalinter" \
        "golang.org/x/tools/cmd/gorename" \
        "golang.org/x/tools/cmd/goimports" \
        "github.com/tools/godep" \
        "github.com/maxbrunsfeld/counterfeiter" \
        "github.com/nsf/gocode" \
        "github.com/onsi/gomega" \
        "github.com/onsi/ginkgo" \
        "github.com/onsi/ginkgo/ginkgo" \
        "github.com/golang/dep/cmd/dep"
    do
        go get -u -v "$tool"
    done

    gometalinter --install
}

setup_yq() {
  pip3 install pyYAML
  pip3 install yq

  # Force deletion of old yq (the one from a ramdom gist :|)
  if [[ -e "$HOME/bin/yq" ]] ; then
    rm "$HOME/bin/yq"
  fi
}

setup_python() {
  echo "Install python2 and python3..."
  unset PYTHONPATH
  pip3 install fabric3
  pip3 install terminaltables
}

main "$@"
