#!/bin/bash

if [ ! -z "$DEBUG" ]; then
  set -x
fi

set -eu
HOMEBREW_FILES=("/usr/local" "/Library/Caches/Homebrew")
DIR="$(cd "$( dirname "$0" )" && pwd )"

echo "$DIR"

main() {
  copy_scripts
  ensure_brew_exists
  update_brew_things
  setup_python
  update_luanvim
  update_tmux_plugins
  ensure_git_config_set
  update_go_tools
}

bump_homebrew_group_permissions() {
  sudo chgrp -R admin "${HOMEBREW_FILES[@]}"
  sudo chmod -R g+w "${HOMEBREW_FILES[@]}"
}

create_backup_with_previous_permissions() {
  local homebrew_permissions_before_update
  homebrew_permissions_before_update="$(gmktemp -t homebrew_permissions_before_update.XXXXXX.txt)"
  ls -lhR "${HOMEBREW_FILES[@]}" > "$homebrew_permissions_before_update"
  echo "A backup file with previous permissions has been created at $homebrew_permissions_before_update"
}

print_usage() {
  echo "Usage: "
}

copy_scripts() {
  if [ ! -f "/usr/local/bin/diff-so-fancy" ]; then
    cp "${DIR}/diff-so-fancy" /usr/local/bin
  fi
}

ensure_brew_exists() {
  echo "Ensuring brew exists..."
  if [[ ! -x /usr/local/bin/brew ]] ; then
    create_backup_with_previous_permissions
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi
}

update_brew_things() {
  echo "Updating brew things..."
  brew tap Homebrew/bundle
  brew update
  brew upgrade
  (cd && brew bundle -v)
}

update_luanvim() {
  echo "Ensuring that we have neovim python plugins"
  pip3 install --upgrade neovim
  npm install -g neovim
  gem install neovim --user-install

  echo "Updating luanvim..."
  if [[ -L ${HOME}/.config/nvim ]]; then
    rm -rf ~/.config/nvim
  fi
  if [[ ! -d "${HOME}/.config/nvim" ]] ; then
    git clone https://github.com/alex-slynko/nvim ~/.config/nvim
  fi
  nvim -c "UpdateRemotePlugins | PlugInstall | PlugUpdate | qa"
  cp after.vim ~/.config/nvim/user/after.vim
}

update_tmux_plugins() {
  echo "Updating tmux plugins..."
  if [[ ! -d "${HOME}/.tmux/plugins/tpm" ]] ; then
    mkdir -p "${HOME}/.tmux/plugins"
    git clone https://github.com/tmux-plugins/tpm "${HOME}/.tmux/plugins/tpm"
  else
    (cd "${HOME}/.tmux/plugins/tpm" ; git pull )
    "$HOME"/.tmux/plugins/tpm/bin/update_plugins all
  fi
}

ensure_git_config_set() {
  echo "Ensuring git configs are set up..."
  cp "${DIR}/.gitconfig" "$HOME/.gitconfig" 2>/dev/null
  cp "${DIR}/.custom_gitconfig" "$HOME/.custom_gitconfig" 2>/dev/null

  git config --global color.ui true

  git config --global color.diff-highlight.oldNormal "red bold"
  git config --global color.diff-highlight.oldHighlight "red bold 52"
  git config --global color.diff-highlight.newNormal "green bold"
  git config --global color.diff-highlight.newHighlight "green bold 22"

  git config --global color.diff.meta "227"
  git config --global color.diff.frag "magenta bold"
  git config --global color.diff.commit "227 bold"
  git config --global color.diff.old "red bold"
  git config --global color.diff.new "green bold"
  git config --global color.diff.whitespace "red reverse"
}

setup_gcloud() {
    if [[ ! -d "${HOME}/google-cloud-sdk" ]] ; then
        curl https://sdk.cloud.google.com | bash
    fi
    #TODO: Add else case that performs check/upgrade
}

update_go_tools() {
    echo "Installing go tools..."
    for tool in \
      "github.com/rogpeppe/godef" \
        "github.com/alecthomas/gometalinter" \
        "golang.org/x/tools/cmd/gorename" \
        "golang.org/x/tools/cmd/goimports" \
        "github.com/tools/godep" \
        "github.com/maxbrunsfeld/counterfeiter" \
        "github.com/nsf/gocode" \
        "github.com/onsi/gomega" \
        "github.com/onsi/ginkgo" \
        "github.com/onsi/ginkgo/ginkgo" \
        "github.com/golang/dep/cmd/dep"
    do
        go get -u -v "$tool"
    done

    gometalinter --install
}

setup_python() {
  echo "Install python2 and python3..."
  unset PYTHONPATH
  pip3 install fabric3
  pip3 install terminaltables
}

main "$@"
